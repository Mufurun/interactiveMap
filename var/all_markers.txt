<!DOCTYPE html>
<html lang="en">


<!--
        Thank you for reading this source :))
        Wanna get this code improved??
        Contact: 

        お疲れ様です！
        ソースをご確認いただきありがとうございます！(/ω＼*)
        問題がある部分や御意見等ございましたら、ご連絡いただければ幸いです。
        連絡先: 
        -->

<head>
  <title>Interactive Map Example</title>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <link rel = "stylesheet" href = "src/styles.css" />
  <link rel = "stylesheet" href = "src/filcon_styles.css" />
  <link rel = "stylesheet" href = "src/regcon_styles.css" />
  <link rel = "stylesheet" href = "src/image_styles.css" />
  <link rel = "stylesheet" href = "terms-conditions/terms-conditions.css" />
</head>
<body>


<!-- Checkin Screen-->
  <div id="entryScreen">
    <div class="entry-box">      
      <h1>Interactive Map Project Draft</h1>
      <p> This is a draft of the interactive map. This program should not be publicly available at this time. The Region here shows all location in the list, which is not the case in the other version. </p>
      <p>See the intructions to get codes to be published</p>
      <p>Take a look at codes here <a style = "color: greenyellow" href="http://github.com/Mufurun/interactiveMap">My github page</a></p>
      <div class = "button-wrapper">
        <button id="enterBtn">Continue</button>
      </div>      
    </div>
  </div>
  <script src = 'terms-conditions/terms-conditions.js'></script>



<!-- Main Screen-->
<div id="map"></div>


<!-- Leaflet JS -->
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<!-- Data for sites -->
<script src="src/data.js"></script>
<script src="src/solid_data.js"></script>

<!-- Functions for sites -->
<script src="src/function.js"></script>


<script type="module">
  
  /*
  #######################
  #######################
  ####   Main code   ####
  #######################
  #######################
  */
  
  /*
  #####################################
  ######   Map initialization   #######
  #####################################
  
      continuousWorld: true
      worldCopyJump: true
      zoomControl: custom -> later
      maxZoom: 18
      minZoom: 6
  
      attribution:  
        https://github.com/tomchadwin/qgis2web
        https://leafletjs.com
        https://qgis.org
        http://www.openstreetmap.org/copyright
      
      Buttons:
        ->after the markers
        
  
  
  */
    //map
    const map = L.map('map',{continuousWorld: true, worldCopyJump: true, zoomControl:false, maxZoom:18, minZoom:5}).setView([51.5, -127], 7);
  
    //attribution
      map.attributionControl.setPrefix('<a href="https://bcforestdiscoverycentre.com/" target="_blank" class = ".leaflet-control-attribution">BCFDC</a> &middot; <a href="https://leafletjs.com" title="A JS library for interactive maps"  class = ".leaflet-control-attribution">Leaflet</a>');
      L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 20,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors'
      }).addTo(map);
    
  
  //I don't know followings
      //var hash = new L.Hash(map);
      //     var bounds_group = new L.featureGroup([]);
      // function setBounds() {
      //     map.setMaxBounds(map.getBounds());
      //}
  //    var autolinker = new Autolinker({truncate: {length: 30, location: 'smart'}});
      
    
  
  
  /*
  #########################
  ######   Markers   ######
  #########################
  
      Add every points on the map using createPopupContent()
      Group them to filter
      Store all info in an array
  */
      //An array to store them (exclusively good points)
      let markers = []
 


    let count_area = {'all':1};
    try{
      let rowNum = 0;
      points.forEach(point => {//This is All Markers
        if(point.error != 'coords'){
          const marker = L.marker(point.coords);
          if(point.error){
            marker.setIcon(greenIcon);
          }
          else if(point.category == 'sawmill'){
            marker.setIcon(sawmill_icon);
          }
          else if(point.category == 'camp'){
            marker.setIcon(camp_icon);
          }
          else if(point.category == 'paper'){
            marker.setIcon(paper_icon);
          }
          else if(point.category == 'community'){
            marker.setIcon(community_icon);
          }
          
          marker.bindPopup(() => {
            rowNum++;
            const popupContent = createPopupContent(point, rowNum);
            return popupContent;
          }, {
              maxWidth: 500,
              minWidth: 300, // optional, for fixed width
          }) 
          marker.addTo(map);
          //set up the scrollbar at the bottom.
          map.on('popupopen', (e) => {
            const popupElement = e.popup.getElement();
            const commentsBox = popupElement.querySelector('.comments');
          });
          if(!point.error){
            markers.push({
              marker: marker,
              category: point.category,
              yearStart: +point.year.slice(0,4),
              yearEnd: +point.year.slice(5,9),
              name: point.title + '(' + point.company + ')',
              area: point.area,
            });
          }
        }

        
       });
    if (points.length == 0){
      alert("Seems you have not updated the data.js file \n read instructions here (https://github.com/Mufurun/interactiveMap)");
    }

    }catch(error){alert("Seems to have at least an error. \nPlease check data entry. and try again");}
  
  
/*
  ##########################################
  ######     All Kinds of Controls     #####
  ##########################################
       Zoom control:
       Current Position:
       Layer Control:
       Region COntrol:
  */
  
  /*
  ******************************
  ******   zoomControl    ******
  ******************************
  */
  
      var zoomControl = L.control.zoom({
              position: 'bottomright'
          }).addTo(map);
  
       
  

  /*
  ***********************************
  ******   Regional Control    ******
  ***********************************
  
  
  */
       const customControl = L.Control.extend({
        onAdd: function (map) {
          const container = L.DomUtil.create('div', 'custom-control leaflet-bar');
          container.innerHTML = customControlhtml(count_area);
  
          // Prevent map click propagation
          L.DomEvent.disableClickPropagation(container);
          L.DomEvent.disableScrollPropagation(container);
  

  
          // Delay attaching the event until the DOM is ready
          setTimeout(() => {
            //Zoom into the area
            regions.forEach(region =>{
              const btn = document.getElementById(region.id);
              if(btn){
                btn.addEventListener("click", () => {
                  map.flyTo(region.zoom,region.size);
                });
              }
            })
            

            const collapsibles = document.querySelectorAll(".collapsible");
            collapsibles.forEach(button => {
              button.addEventListener("click", function () {
                const content = this.parentElement.nextElementSibling;
                if (content.style.maxHeight) {
                  content.style.maxHeight = null;
                  this.classList.toggle("active");
                  updateChildren(content);  
                } else {
                  this.classList.toggle("active");
                  content.style.maxHeight = 350 + "px";
                  updateSibling(content);  
                  updateParentHeight(content);
                }
              });
            });
            const world = document.querySelectorAll(".button-original-map");
            world.forEach(button => {
              button.addEventListener("click", function () {
                const content = this.nextElementSibling;
                updateSibling(content);  
                  
              });
            });
            const regconbutton = document.getElementById('regcon');
            if(regconbutton){
                regconbutton.addEventListener("click", () => {
                  alert(`Click to Open the Specific Region. 
Click Plus Sign to Zoom In`);
                });
            }

  
            region_categories.forEach(location =>{
                listMarkers(map, markers, location);
            });
          }, 0);
  
          return container;
        }
      });
  
  
    /*
  *********************************
  ******   Filter Control    ******
  *********************************  
  */
      const filterControl = L.Control.extend({
        onAdd: function (map) {
          const container = L.DomUtil.create('div', 'filter-control leaflet-bar');
          container.innerHTML = filterControlhtml()


  
          // Prevent map click propagation
          L.DomEvent.disableClickPropagation(container);
          L.DomEvent.disableScrollPropagation(container);

          setTimeout(() => {
            category_list.forEach(obj =>{
              document.getElementById(obj).addEventListener('change', function(){
                let bool = false;
                if (document.getElementById('showFilterYear').value == 'All Time'){
                  bool = true;
                }
                filterMarker(map, markers, bool);
              });
            });
            document.getElementById('filterYear').addEventListener('input',function(){
              filterMarker(map, markers);
              document.getElementById('showFilterYear').value = this.value;
            });
            document.getElementById('allTime').addEventListener('click',function(){
              filterMarker(map, markers, true);
              document.getElementById('showFilterYear').value = 'All Time';
              document.getElementById('filterYear').value = 2025;
            });
            document.getElementById('showFilterYear').addEventListener("input", function () {
              this.value = this.value.replace(/\D/g, "");
              document.getElementById('filterYear').value = this.value;
              if(1848 <= +this.value && +this.value <= 2025){
                filterMarker(map, markers);
              }
              if(this.value == ""){
                document.getElementById('filterYear').value = 0;
              }
            });

            const filconbutton = document.getElementById('filcon');
            if(filconbutton){
                filconbutton.addEventListener("click", () => {
                  alert(`Select Categories of sites.
Change the bar or Type the year to select year.
Or Click All Time button.`);
                });
            }


          }, 0);
    
          return container;
        }
      });



  /*
  ********************************
  ******   Layer Control    ******
  ********************************
  */
      const layerControl = L.Control.extend({
        onAdd: function (map) {
          const container = L.DomUtil.create('div');
          container.innerHTML = layerControlhtml()
          layerFunctions(map);

  
          // Prevent map click propagation
          L.DomEvent.disableClickPropagation(container);
          L.DomEvent.disableScrollPropagation(container);

          setTimeout(()=>{
            const layconbutton = document.getElementById('laycon');
            if(layconbutton){
                layconbutton.addEventListener("click", () => {
                  alert("Change the Map Layer");
                });
            }
          },0)

    
          return container;
        }
      });


/*
###########    ADD CONTROLs    ###########
*/
      map.addControl(new layerControl({ position: 'topleft' }));
      map.addControl(new filterControl({ position: 'topright' }));
      map.addControl(new customControl({ position: 'topleft' }));




      size_for_phone(map);  
  
  </script>

</body>
</html>

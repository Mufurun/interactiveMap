<!DOCTYPE html>
<html lang="en">


<!--
        Thank you for reading this source :))
        Wanna get this code improved??
        Contact: 

        お疲れ様です！
        ソースをご確認いただきありがとうございます！(/ω＼*)
        問題がある部分や御意見等ございましたら、ご連絡いただければ幸いです。
        連絡先: 
        -->

<head>
  <title>Heritage Map Project</title>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <link rel = "stylesheet" href = "src/styles.css" />
  <link rel = "stylesheet" href = "src/filcon_styles.css" />
  <link rel = "stylesheet" href = "src/regcon_styles.css" />
  <link rel = "stylesheet" href = "src/image_styles.css" />
</head>
<body>


<!-- Main Screen-->
<div id="map"></div>


<!-- Leaflet JS -->
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<!-- Data for sites -->
<script src="src/data.js"></script>
<script src="src/solid_data.js"></script>

<!-- Functions for sites -->
<script src="src/function.js"></script>


<script type="module">
  
  /*
  #######################
  #######################
  ####   Main code   ####
  #######################
  #######################
  */
  
  /*
  #####################################
  ######   Map initialization   #######
  #####################################
  
      continuousWorld: true
      worldCopyJump: true
      zoomControl: custom -> later
      maxZoom: 18
      minZoom: 6
  
      attribution:  
        https://github.com/tomchadwin/qgis2web
        https://leafletjs.com
        https://qgis.org
        http://www.openstreetmap.org/copyright
      
      Buttons:
        ->after the markers
        
  
  
  */
    //map
    const map = L.map('map',{continuousWorld: true, worldCopyJump: true, zoomControl:false, maxZoom:18, minZoom:5}).setView([51.5, -127], 7);
  
    //attribution
      map.attributionControl.setPrefix('<a href="https://bcforestdiscoverycentre.com/" target="_blank" class = ".leaflet-control-attribution">BCFDC</a> &middot; <a href="https://leafletjs.com" title="A JS library for interactive maps"  class = ".leaflet-control-attribution">Leaflet</a>');
      L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 20,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
      }).addTo(map);
    
  
  //I don't know followings
      //var hash = new L.Hash(map);
      //     var bounds_group = new L.featureGroup([]);
      // function setBounds() {
      //     map.setMaxBounds(map.getBounds());
      //}
  //    var autolinker = new Autolinker({truncate: {length: 30, location: 'smart'}});
      
    
  
  
  /*
  #########################
  ######   Markers   ######
  #########################
  
      Add every points on the map using createPopupContent()
      Group them to filter
      Store all info in an array
  */
      //An array to store them (exclusively good points)
      let markers = []
 

    let count_area = {};//Disctionary donesn't need if statement

    try{

      points.forEach(point => {
        if(!point.error){//This is Publish
          const marker = L.marker(point.coords);
          if(point.category == 'sawmill'){
            marker.setIcon(sawmill_icon);
          }
          else if(point.category == 'camp'){
            marker.setIcon(camp_icon);
          }
          else if(point.category == 'paper'){
            marker.setIcon(paper_icon);
          }
          else if(point.category == 'community'){
            marker.setIcon(community_icon);
          }

          
          marker.bindPopup(() => {
            const popupContent = createPopupContent(point);
            return popupContent;
          }, {
              maxWidth: 500,
              minWidth: 300 // optional, for fixed width
          }) 
          marker.addTo(map);
          //set up the scrollbar at the bottom.
          map.on('popupopen', (e) => {
            const popupElement = e.popup.getElement();
            const commentsBox = popupElement.querySelector('.comments');
          });
          if(!point.error){
            if (!count_area.hasOwnProperty(point.area)) {
              count_area[point.area] = 1;
            } else{
              count_area[point.area]  = count_area[point.area] + 1;
            }
            markers.push({
              marker: marker,
              category: point.category,
              yearStart: +point.year.slice(0,4),
              yearEnd: +point.year.slice(5,9),
              name: point.title + '(' + point.company + ')',
              area: point.area,
            });
          }
        }

        
       });
      if (points.length == 0){
        alert("Seems you have not updated the data.js file \n Read instructions here (https://github.com/Mufurun/interactiveMap)");
      }

    }catch(error){console.log(error);
      alert("Seems to have at least an error. \nPlease check data entry. and try again");}



/*
  ##########################################
  ######     All Kinds of Controls     #####
  ##########################################
       Zoom control:
       Current Position:
       Layer Control:
       Region COntrol:
  */
  
  /*
  ******************************
  ******   zoomControl    ******
  ******************************
  */
  
      var zoomControl = L.control.zoom({
              position: 'bottomright'
          }).addTo(map);
  
       
  

  /*
  ***********************************
  ******   Regional Control    ******
  ***********************************
  
  
  */
       const customControl = L.Control.extend({
        onAdd: function (map) {
          const container = L.DomUtil.create('div', 'custom-control leaflet-bar');
          container.innerHTML = customControlhtml(count_area);
  
          // Prevent map click propagation
          L.DomEvent.disableClickPropagation(container);
          L.DomEvent.disableScrollPropagation(container);
  

  
          // Delay attaching the event until the DOM is ready
          setTimeout(() => {
            //Zoom into the area
            regions.forEach(region =>{
              const btn = document.getElementById(region.id);
              if(btn){
                btn.addEventListener("click", () => {
                  map.flyTo(region.zoom,region.size);
                });
              }
            })
            

            const collapsibles = document.querySelectorAll(".collapsible");
            collapsibles.forEach(button => {
              button.addEventListener("click", function () {
                const content = this.parentElement.nextElementSibling;
                if (content.style.maxHeight) {
                  content.style.maxHeight = null;
                  this.classList.toggle("active");
                  updateChildren(content);  
                } else {
                  this.classList.toggle("active");
                  content.style.maxHeight = 350 + "px";
                  updateSibling(content);  
                  updateParentHeight(content);
                }
              });
            });
            const world = document.querySelectorAll(".button-original-map");
            world.forEach(button => {
              button.addEventListener("click", function () {
                const content = this.nextElementSibling;
                updateSibling(content);  
                  
              });
            });
            const regconbutton = document.getElementById('regcon');
            if(regconbutton){
                regconbutton.addEventListener("click", () => {
                  alert(`Click to Open the Specific Region. 
Click Plus Sign to Zoom In`);
                });
            }

  
            region_categories.forEach(location =>{
                listMarkers(map, markers, location);
            });
          }, 0);
  
          return container;
        }
      });
  
  
      

  /*
  *********************************
  ******   Filter Control    ******
  *********************************  
  */
      const filterControl = L.Control.extend({
        onAdd: function (map) {
          const container = L.DomUtil.create('div', 'filter-control leaflet-bar');
          container.innerHTML = filterControlhtml()


  
          // Prevent map click propagation
          L.DomEvent.disableClickPropagation(container);
          L.DomEvent.disableScrollPropagation(container);

          setTimeout(() => {
            category_list.forEach(obj =>{
              document.getElementById(obj).addEventListener('change', function(){
                let bool = false;
                if (document.getElementById('showFilterYear').value == 'All Time'){
                  bool = true;
                }
                filterMarker(map, markers, bool);
              });
            });
            document.getElementById('filterYear').addEventListener('input',function(){
              filterMarker(map, markers);
              document.getElementById('showFilterYear').value = this.value;
            });
            document.getElementById('allTime').addEventListener('click',function(){
              filterMarker(map, markers, true);
              document.getElementById('showFilterYear').value = 'All Time';
              document.getElementById('filterYear').value = 2025;
            });
            document.getElementById('showFilterYear').addEventListener("input", function () {
              this.value = this.value.replace(/\D/g, "");
              document.getElementById('filterYear').value = this.value;
              if(1848 <= +this.value && +this.value <= 2025){
                filterMarker(map, markers);
              }
              if(this.value == ""){
                document.getElementById('filterYear').value = 0;
              }
            });

            const filconbutton = document.getElementById('filcon');
            if(filconbutton){
                filconbutton.addEventListener("click", () => {
                  alert(`Select Categories of sites.
Change the bar or Type the year to select year.
Or Click All Time button.`);
                });
            }


          }, 0);
    
          return container;
        }
      });


  /*
  ********************************
  ******   Layer Control    ******
  ********************************
  */
      const layerControl = L.Control.extend({
        onAdd: function (map) {
          const container = L.DomUtil.create('div');
          container.innerHTML = layerControlhtml()
          layerFunctions(map);

  
          // Prevent map click propagation
          L.DomEvent.disableClickPropagation(container);
          L.DomEvent.disableScrollPropagation(container);

          setTimeout(()=>{
            const layconbutton = document.getElementById('laycon');
            if(layconbutton){
                layconbutton.addEventListener("click", () => {
                  alert("Change the Map Layer");
                });
            }
          },0)

    
          return container;
        }
      });


/*
###########    ADD CONTROLs    ###########
*/
      map.addControl(new layerControl({ position: 'topleft' }));
      map.addControl(new filterControl({ position: 'topright' }));
      map.addControl(new customControl({ position: 'topleft' }));



  
       size_for_phone(map);  
  
  </script>

</body>
</html>
